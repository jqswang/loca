#!/usr/bin/env jruby

LocaCmdDir = File.dirname(File.expand_path(__FILE__))
$: << LocaCmdDir

require 'fileutils'
require 'src/env'
require 'src/machine'
#require 'src/Anytaskset/anytaskset-mc'
require 'net/http'
require 'rest_client'
require 'launchy'

$Debug = true
$DryRun = false

def run_cmd syscmd
  puts syscmd
  is_ok = system syscmd unless $DryRun
  raise "system command #{syscmd} failed" unless is_ok
end

def cmd_help
  puts "LocalityLab v0.1"
  puts "#{$0.split('/')[-1]} commands:"
  puts "config\tconfiguration"
  puts "run\trun loca analysis on one program"
  puts "  -d\t(default) run data analysis"
  puts "  -i\trun instruction analysis"
  puts "  -a\trun both data and instruction analysis"
  puts "mr\trun both data and instruction analysis"
#  puts "prun\trun loca analysis on one parallel program "
#  puts "pfp\tget footprint of a prun"
#  puts "pmr\tget miss ratio of a pfp"
  puts "upload\tupload current data to server"
  puts "  -r [server address]\tupload to remote servers"
  puts "clean\t[todo]clean current data dir"
  puts "help"
end

if ARGV.size >= 1
  cmd = ARGV.shift
  runpara = ARGV.shift if cmd == "run"
  args = ARGV
else
  cmd_help
  Kernel.exit(1)
end

begin
  if cmd == "config"
    Labenv.config

  elsif cmd == "help"
    cmd_help

  else
    if Labenv.env == nil
      warn "Please run '#{$0.split('/')[-1]} config' first"
      exit(1)
    end

    if cmd == "run"
      data_dir = "./loca-data" #jqswang #Labenv.paths[Labenv::DataDir]
      unless File.directory?(data_dir)
        FileUtils.mkdir_p(data_dir)
      end
      basename = Machine.get_output_file_name(args[0])
      last = File.open("#{data_dir}/name.last","w")
      last.write basename
      basename = File.join(data_dir, basename)
      if runpara == "-d"
        syscmd = "#{Labenv.env[cmd]} -o #{basename}.dat -m 1 -- #{args * ' '}"
      elsif runpara == "-i"
        syscmd = "#{Labenv.env[cmd]} -o #{basename}.dat -m 2 -- #{args * ' '}"
      elsif runpara == "-a"
        syscmd = "#{Labenv.env[cmd]} -o #{basename}.dat -m 3 -- #{args * ' '}"
      else
        syscmd = "#{Labenv.env[cmd]} -o #{basename}.dat -m 1 -- #{runpara} #{args * ' '}"
      end
      t1 = Time.now
      run_cmd syscmd
      info = Machine.get_machine_env
      info[:time] = Time.now - t1
      info[:status] = $?
      info[:command] = syscmd
      File.open("#{basename}.info", 'w', 0644) do |f|
        f.puts info.to_yaml
      end
    elsif cmd == "mr"
      data_dir = Labenv.paths[Labenv::DataDir]
      last = File.open("#{data_dir}/name.last","r")
      basename = args[0] || basename=last.readline
      puts 'please input the test metric a/d/i for All/Data/Instructions'
      metric = $stdin.gets.chomp
      basename = File.join(data_dir,"#{basename}.dat.#{metric}")
      puts 'please input the cache size (byte)'
      cachesize = $stdin.gets.chomp.to_f
      #calc the miss ratio from data
      File.open(basename, "r") do |f|
        firstline=f.gets #skip the first line
        accesscount = firstline.split[0][2..-1].to_i
        dis64 = firstline.split[1][3..-1].to_i
        dis4 = firstline.split[2][3..-1].to_i
        while line = f.gets
          if line.split[1].to_f <= cachesize
          lastline = line
          else
            break
          end
        end
        unless lastline == nil
          x1=lastline.split[1].to_f
          x2=line.split[1].to_f
          y1=lastline.split[4].to_f
          y2=line.split[4].to_f
          mr1=y1+(cachesize-x1)*(y2-y1)/(x2-x1)
          y1=lastline.split[7].to_f
          y2=line.split[7].to_f
          mr2=y1+(cachesize-x1)*(y2-y1)/(x2-x1)
          puts "Access count:\t#{accesscount}"
          puts "For 64 byte cache block"
          puts "\tMax footprint:\t#{dis64}"
          puts "\tMiss ratio:\t#{mr1}"
          puts "For 4 byte cache block"
          puts "\tMax footprint:\t#{dis4}"
          puts "\tMiss ratio:\t#{mr2}"
        else
          raise "wrong cache size"
        end
      end

=begin
    elsif cmd == "prun"
      data_dir = Labenv.paths[Labenv::DataDir]
      basename = Machine.get_output_file_name(args[0])
      last = File.open("#{data_dir}/name.last.p","w")
      last.write basename
      basename = File.join(data_dir, basename)
      syscmd = "#{Labenv.env[cmd]} -o #{basename}.fp.out -l 12 -g #{basename}.sg.out -- #{args * ' '}"
      t1 = Time.now
      run_cmd syscmd
      info = Machine.get_machine_env
      info[:time] = Time.now - t1
      info[:status] = $?
      info[:command] = syscmd
      File.open("#{basename}.info", 'w', 0644) do |f|
        f.puts info.to_yaml
      end

    elsif cmd == "pfp"
      data_dir = Labenv.paths[Labenv::DataDir]
      last = File.open("#{data_dir}/name.last.p","r")
      basename = args[0] || basename=last.readline
      basename = File.join(data_dir, basename)
      puts 'please input the max number of threads'
      m = $stdin.gets.chomp
      puts 'please input the target thread set, divide by comma (i.e. 1,3)'
      group = $stdin.gets.chomp
      puts 'please input the co-running threads, divide by comma (i.e. 1,2,3,4)'
      range = $stdin.gets.chomp
      syscmd = "#{Labenv.env[cmd]} -m #{m} -l 12 -p 2 -f #{basename}.fp.out -g #{basename}.sg.out --group=#{group} --range=#{range} > #{basename}.fp"
      run_cmd syscmd
    elsif cmd == "pmr"
      data_dir = Labenv.paths[Labenv::DataDir]
      last = File.open("#{data_dir}/name.last.p","r")
      basename = args[0] || basename=last.readline
      basename = File.join(data_dir, basename)
      puts 'please input the cache size (byte)'
      c = $stdin.gets.chomp
      puts 'please input the target thread set, divide by comma (i.e. 1,3)'
      group = $stdin.gets.chomp
      syscmd = "#{Labenv.env[cmd]} -c #{c} -f #{basename}.fp -p #{basename}.fp.out.pt --group=#{group}"
      run_cmd syscmd
=end

    elsif cmd == "upload"
      if args.empty?
        data_dir = "./loca-data"
      else
        data_dir = args[0]
      end
      puts "Upload data from #{data_dir}"
      #data_dir = Labenv.paths[Labenv::DataDir]
      url = (args[0] != '-r')?'http://localhost:3000/upload':'http://loca.highpower.me:3000/upload'
      Dir.foreach(data_dir) { |file|
        isDir = File.directory?(file)
        next if File.directory?(file)
        if file =~ /.dat([.][a|i|d])?$/ or file =~ /.info$/ or file =~ /.fp$/#check file type
          basename = File.join(data_dir, file)
          f = File.new(basename, "rb")
          puts "Sending post #{basename}"
          reply = RestClient.post(url,
                                  :upload => f
          )
          if reply != ''
            puts url[0..-7]+reply
            Launchy.open(url[0..-7]+reply)
          end
        end
      }
    elsif cmd == "clean"
      #todo
      puts "[todo] comming soon, please manually empty the data dir"
    else
      puts "#{cmd} not a valid command (see '#{$0.split('/')[-1]} help')"
    end

  end
rescue Exception => e
  msg = "Loca Error Report: command 'loca #{cmd}' failed.\n#{e.message}" + "\n" + "#{e.backtrace * ' '}\n\n"
  msg += Labenv.env.inspect
  puts msg
=begin
  while true
    puts "\n\nLoca Execution Error: Do you give permission to send the error report by email? \n(Answer yes/no/see report)"
    answer = $stdin.gets.chomp
    if answer =~ /^see/
      puts msg
    elsif answer == 'yes' || answer == 'y'
      require 'src/email'
      send_email 'cding@cs.rochester.edu', {:body => msg}
      break
    else
      break
    end # if
  end # while
=end
end
  
